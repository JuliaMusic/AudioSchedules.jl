var documenterSearchIndex = {"docs":
[{"location":"#Interface-1","page":"Interface","title":"Interface","text":"","category":"section"},{"location":"#","page":"Interface","title":"Interface","text":"Modules = [AudioSchedules]","category":"page"},{"location":"#","page":"Interface","title":"Interface","text":"Modules = [AudioSchedules]","category":"page"},{"location":"#AudioSchedules.AudioSchedule-Tuple{}","page":"Interface","title":"AudioSchedules.AudioSchedule","text":"AudioSchedule(the_sample_rate)\n\nCreate an AudioSchedule.\n\njulia> using AudioSchedules\n\njulia> using Unitful: s, Hz\n\njulia> a_schedule = AudioSchedule();\n\nAdd a synthesizer to the schedule with schedule!.\n\njulia> envelope = Envelope((0, 0.25, 0), (0.05s, 0.95s), (Line, Line));\n\njulia> schedule!(a_schedule, StrictMap(sin, Cycles(440Hz)), 0s, envelope)\n\njulia> schedule!(a_schedule, StrictMap(sin, Cycles(440Hz)), 1s, envelope)\n\njulia> schedule!(a_schedule, StrictMap(sin, Cycles(550Hz)), 1s, envelope)\n\nThen, you can create a SampledSource from the schedule using Plan.\n\njulia> a_plan = Plan(a_schedule, 44100Hz);\n\nYou can find the number of samples in a Plan with length.\n\njulia> the_length = length(a_plan)\n88200\n\nYou can use the plan as a source for samples.\n\njulia> using SampledSignals: unsafe_read!\n\njulia> buf = Vector{Float64}(undef, the_length);\n\njulia> unsafe_read!(a_plan, buf, 0, the_length);\n\njulia> buf[1:4] ≈ [0.0, 7.1029846e-6, 2.8356127e-5, 6.3592327e-5]\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#AudioSchedules.Cycles","page":"Interface","title":"AudioSchedules.Cycles","text":"Cycles(frequency)\n\nCycles from 0 to 2π to repeat at a frequency.\n\n\n\n\n\n","category":"type"},{"location":"#AudioSchedules.Envelope","page":"Interface","title":"AudioSchedules.Envelope","text":"Envelope(levels, durations, shapes)\n\nShapes are all functions which return Synthesizers:\n\nshape(start_value, end_value, duration) -> Synthesizer\n\ndurations and levels list the time and level of the boundaries of segments of the envelope. For example,\n\nEnvelope([0.0, 1.0, 1.0, 0.0], [.05 s, 0.9 s, 0.05 s], [Line, Line, Line])\n\nwill create an envelope with three segments:\n\nLine(0.0, 1.0, 0.05 s)\nLine(1.0, 1.0, 0.9 s)\nLine(1.0, 0.0, 0.05 s)\n\n\n\n\n\n","category":"type"},{"location":"#AudioSchedules.Line","page":"Interface","title":"AudioSchedules.Line","text":"Line(start_value, end_value, duration)\n\nA line from start_value to end_value that lasts for duration.\n\n\n\n\n\n","category":"type"},{"location":"#AudioSchedules.Plan-Tuple{AudioSchedule,Any}","page":"Interface","title":"AudioSchedules.Plan","text":"Plan(a_schedule::AudioSchedule)\n\nReturn a SampledSource for the schedule.\n\n\n\n\n\n","category":"method"},{"location":"#AudioSchedules.StrictMap","page":"Interface","title":"AudioSchedules.StrictMap","text":"StrictMap(a_function, synthesizers...)\n\nMap a_function over synthesizers, assuming that none of the synthesizers will end before they are scheduled to.\n\n\n\n\n\n","category":"type"},{"location":"#AudioSchedules.Synthesizer","page":"Interface","title":"AudioSchedules.Synthesizer","text":"abstract type Synthesizer\n\nSynthesizers need only support make_iterator.\n\n\n\n\n\n","category":"type"},{"location":"#AudioSchedules.equal_loudness-Tuple{StrictMap{#s29,Tuple{Cycles}} where #s29}","page":"Interface","title":"AudioSchedules.equal_loudness","text":"equal_loudness(synthesizer::StrictMap{<:Any, Tuple{Cycles}})\n\nChange the volume of a synthesizer so that sounds played at different frequencies will have the same perceived volume. Assumes that the map function has a period of 2π.\n\njulia> using AudioSchedules\n\njulia> using Unitful: Hz\n\njulia> soft = equal_loudness(StrictMap(cos, Cycles(10000Hz)));\n\njulia> first(make_iterator(soft, 44100Hz)) ≈ 0.0053035474\ntrue\n\nTechnical details: uses the ISO 226:2003 curve for 40 phons. Scales output by a ratio of the equivalent sound pressure at the current frequency to the equivalent sound pressure at 20Hz (about as low as humans can hear).\n\n\n\n\n\n","category":"method"},{"location":"#AudioSchedules.extrema!-Tuple{Plan}","page":"Interface","title":"AudioSchedules.extrema!","text":"extrema!(a_plan::Plan)\n\nFind the extrema of a plan. This will consume the plan.\n\njulia> using AudioSchedules\n\njulia> using Unitful: s, Hz\n\njulia> a_schedule = AudioSchedule();\n\njulia> schedule!(a_schedule, StrictMap(sin, Cycles(440Hz)), 0s, Envelope((1, 1), (1s,), (Line,)))\n\njulia> extrema!(Plan(a_schedule, 44100Hz)) .≈ (-0.99999974, 0.99999974)\n(true, true)\n\n\n\n\n\n","category":"method"},{"location":"#AudioSchedules.make_iterator","page":"Interface","title":"AudioSchedules.make_iterator","text":"make_iterator(synthesizer, the_sample_rate)\n\nReturn an iterator that will the play the synthesizer at the_sample_rate\n\n\n\n\n\n","category":"function"},{"location":"#AudioSchedules.plan_within-Tuple{AudioSchedule,Any}","page":"Interface","title":"AudioSchedules.plan_within","text":"plan_within(a_schedule::AudioSchedule, the_sample_rate; maximum_volume = 1.0)\n\nMake a plan, then adjust the volume to maximum_volume.\n\njulia> using AudioSchedules\n\njulia> using Unitful: s, Hz\n\njulia> schedule = AudioSchedule();\n\njulia> note = StrictMap(sin, Cycles(440Hz)), 0s, Envelope((1, 1), (1s,), (Line,));\n\njulia> schedule!(schedule, note...); schedule!(schedule, note...)\n\njulia> plan = plan_within(schedule, 44100Hz);\n\njulia> extrema!(plan) .≈ (-1.0, 1.0)\n(true, true)\n\n\n\n\n\n","category":"method"},{"location":"#AudioSchedules.schedule!-Tuple{AudioSchedule,Synthesizer,Any,Envelope}","page":"Interface","title":"AudioSchedules.schedule!","text":"schedule!(schedule::AudioSchedule, synthesizer::Synthesizer, start_time, envelope::Envelope)\n\nSchedule an audio synthesizer to be added to the schedule, starting at start_time with the duration and volume contained in an Envelope.\n\n\n\n\n\n","category":"method"}]
}
